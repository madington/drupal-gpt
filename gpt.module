<?php

/**
 * Implements hook_ad_manager_field_additional_description().
 *
 * Note, this hook is kind of a psuedo hook. It is the provider, gpt_ads,
 * rather than the module name gpt, as one module can supply multiple
 * providers potentially.
 */
function gpt_ads_ad_manager_field_additional_description($name, $unit) {
  static $descriptions = array();

  // If this unit has not had its description generated.
  if (!isset($descriptions[$name])) {
    if (isset($unit->settings['gpt_ads']['outofpage']) &&
        $unit->settings['gpt_ads']['outofpage'] === 1) {
      $descriptions[$name] = t('The ad unit selected is an out of page unit and has no dimensional definitions.');
    }
    elseif (!isset($unit->settings['gpt_ads']['size'])) {
      $descriptions[$name] = FALSE;
    }
    else {
      $size_settings = $unit->settings['gpt_ads']['size'];
      $friendly_size = array();
      module_load_include('inc', 'gpt', 'gpt.admin');
      foreach ((array) $size_settings as $breakpoint => $sizes) {
        $friendly_size[] = array(
          'breakpoint' => $breakpoint,
          'size' => _gpt_ads_size_to_friendly($sizes)
        );
      }

      if (empty($friendly_size)) {
        $descriptions[$name] = FALSE;
      }
      elseif (count($friendly_size) === 1) {
        $descriptions[$name] = t('The ad unit selected will render in the following dimensions: @size',
            array('@size' => $friendly_size[0]['size']));
      }
      else {
        $presentation_sizes = array();
        // Iterate over each breakpoint.
        for ($i = 0; $i < count($friendly_size); $i++) {
          // Determine whether to report a size or a no size message.
          if (empty($friendly_size[$i]['size'])) {
            $use_size = t('No ad displayed');
          }
          else {
            $use_size = $friendly_size[$i]['size'];
          }
          // If there is not another breakpoint after this one.
          if (!isset($friendly_size[$i + 1])) {
            $presentation_sizes[] = t('@start up: @size', array(
              '@start' => $friendly_size[$i]['breakpoint'],
              '@size' => $use_size,
            ));
          }
          // Else there is another breakpoint, record the size for the range.
          else {
            $presentation_sizes[] = t('@start to @end: @size', array(
              '@start' => $friendly_size[$i]['breakpoint'],
              '@end' => $friendly_size[$i + 1]['breakpoint'] -1,
              '@size' => $use_size,
            ));

          }
        }
        $presentation_list = '<ul><li>' . implode('</li><li>', $presentation_sizes) . '</li></ul>';
        $descriptions[$name] = t('The ad unit selected has the following presentations based on browser width: !size',
            array('!size' => $presentation_list));
      }
    }
  }

  // If there is a description to report.
  if ($descriptions[$name] !== FALSE) {
    return $descriptions[$name];
  }
}

/**
 * Implements hook_ad_manager_providers().
 */
function gpt_ad_manager_providers() {
  return array(
    'version' => 1,
    'provides' => array(
      // The key acts as the callback function for the configuration form, and
      // as the theme output name.
      // Do not wrap the value in t() as it is cached and will be wrapped with
      // t() on output.
      'gpt_ads' => 'Google Publisher Tag',
    ),
  );
}

/**
 * Ad Manager ad provider form for Google Publisher Tag.
 */
function gpt_ads(&$form, &$form_state) {
  // Load in logic that is needed for the provider form.
  ctools_include('gpt.admin', 'gpt', FALSE);

  // Call the form function, used to keep the .module light weight.
  gpt_ads_form($form, $form_state);
}

/**
 * Alter GPT page options by adding and overriding values.
 *
 * @param array $original
 * @param array $integrate
 *   Any keys defined in this array will override the values in $original; the
 *   exception being the targeting key, which will either attempt to append or
 *   override values for each key.
 */
function gpt_alter_page_options(&$original, $integrate) {
  if (isset($integrate['targeting'])) {
    $targeting = get_object_vars($integrate['targeting']);
    foreach ($targeting as $key => &$values) {
      // Pull method out of values.
      $method = $values['method'];
      unset($values['method']);

      // Override or assign.
      if ((isset($original['targeting']->$key) && $method == '1')
          || !isset($original['targeting']->$key)) {
        $original['targeting']->$key = $values;
      }
      // Else append.
      else {
        foreach ($values as $value) {
          $target =& $original['targeting']->$key;
          $target[] = $value;
        }
      }
    }
    // Unset $integrate targeting, so it doesn't override below.
    unset($integrate['targeting']);
  }

  // Update any other settings by overriding.
  foreach ($integrate as $k => $v) {
    $original[$k] = $v;
  }
}

/**
 * #element_validate form element handler.
 *
 * Passes through to #gpt_validate_handler defined property. This avoids
 * undefined function errors from our validate handlers not being in .module for
 * performance reasons.
 */
function gpt_element_validate_handler($element, &$form_state, $form) {
  ctools_include('gpt.admin', 'gpt', FALSE);
  $validate_handler = $element['#gpt_validate_handler'];
  $validate_handler($element, $form_state, $form);
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Alter settings form to provide needed configuration.
 */
function gpt_form_ad_manager_settings_form_alter(&$form, &$form_state) {
  // Load in logic that is needed for the settings form.
  ctools_include('gpt.admin', 'gpt', FALSE);
  gpt_global_settings_form($form, $form_state);
}

/**
 * Load page level ad settings.
 *
 * @return array
 *   Page option associative array containing:
 *   - network_code: The network for serving ads from, string.
 *   - targeted_ad_unit: The ad unit hiearchy, string.
 *   - async: Use asynchrounous mode, boolean.
 *   - sra: Use single request architecture, boolean.
 *   - collapse: Collapse divs without creatives, boolean.
 *   - targeting: Page level targeting, multi-dimensional array.
 *
 * @todo Finalize caching standard and flushing standard.
 */
function gpt_load_page_options() {
  $options = &drupal_static(__FUNCTION__);

  if (!isset($options)) {
    // Build the cid, we md5 the path to ensure it fits the max index length.
    $cid = 'gpt:page_options:' . md5(current_path());
    // Attempt to fetch from cache.
    $cache = cache_get($cid);
    if ($cache) {
      $options = $cache->data;
    }
    // Else build options
    else {
      $options = array(
        'network_code' => variable_get('gpt__network_code', ''),
        'targeted_ad_unit' => variable_get('gpt__targeted_ad_unit', ''),
        'async' => variable_get('gpt__async', 1),
        'sra' => variable_get('gpt__sra', 0),
        'collapse' => variable_get('gpt__collapse', 0),
        'refresh' => variable_get('gpt__refresh', 0),
        'targeting' => variable_get('gpt__targeting', array()),
      );
      drupal_alter('gpt_load_page_options', $options);

      // Sanitize targeted_ad_unit and targeting.
      $options['targeted_ad_unit'] = gpt_sanitize_targeted_ad_unit($options['targeted_ad_unit']);
      gpt_sanitize_targeting($options['targeting']);

      // Store page options in cache to prevent needless rebuilding.
       cache_set($cid, $options);
    }
  }

  return $options;
}

/**
 * Implements hook_page_build().
 */
function gpt_page_build(&$page) {
  $options = gpt_load_page_options();

  // Ensure required options are set.
  if (empty($options['network_code']) || empty($options['targeted_ad_unit'])) {
    if (user_access('administer ad manager')) {
      drupal_set_message(t('Google Publisher Tag ads should be shown on this page, but <a href="!url">key configurations</a> have not been set.',
          array('!url' => url('admin/structure/ad-manager/settings'))), 'warning');
    }
    return;
  }

  $js =& $page['page_top']['gpt_js'];
  $attached =& $page['page_top']['gpt']['#attached'];
  // Attach our GPT class and behavior.
  $attached['js'][] = array(
    'data' => drupal_get_path('module', 'gpt') . '/js/gpt.js',
    'every_page' => TRUE,
  );

  // Add page level options.
  $attached['js'][] = array(
    'data' => array('gpt' => $options),
    'type' => 'setting',
  );

  // Initialize our GPT code.
  $js[] = array(
    '#value' => 'Drupal.GPT = new Drupal.GPTClass(Drupal.settings.gpt);',
  );
  if ($options['async']) {
    // The only way for SRA to work is to have it run after the inline JS of
    // the body, we force this with jQuery's .ready().
    $init_code = 'Drupal.GPT.pageOptions.sra ? jQuery(document).ready(Drupal.GPT.run) : googletag.cmd.push(Drupal.GPT.run);';
  }
  else {
    // Browser run promise is per script tag, this makes it two tags, we run
    // immediately as GPT must be ready when inline tags are hit, no support
    // for SRA.
    $init_code = 'Drupal.GPT.run();';
  }
  $js[] = array(
    '#value' => $init_code,
  );

  foreach ($js as &$js_element) {
    $js_element['#tag'] = 'script';
    $js_element['#attributes'] = array(
      'type' => 'text/javascript',
    );
    $js_element['#value_prefix'] = "\n<!--//--><![CDATA[//><!--\n";
    $js_element['#value_suffix'] = "\n//--><!]]>\n";
    $js_element['#theme'] = 'html_tag';
  }
}

/**
 * Flushes page options cache data for the specified path or all paths.
 *
 * @param string $path
 */
function gpt_page_options_cache_clear($path = NULL) {
  cache_clear_all(
    'gpt:page_options:' . (isset($path) ? md5($path) : ''),
    'cache',
    !isset($path)
  );
}

/**
 * Implements hook_permission().
 */
function gpt_permission() {
  return array(
    'gpt set javascript' => array(
      'title' => t('Set Javascript targeting'),
      'description' => t('Allow users to create and edit Javascript targeting values. Potential to break Javascript on the site.'),
    ),
  );
}

/**
 * Helper function, prepare targeted ad unit string.
 *
 * @param string $str
 *   String to be modified to only allow permissible characters.
 *
 * @return string
 *   The sanitized string that GPT will accept.
 */
function gpt_sanitize_targeted_ad_unit($str) {
  if (variable_get('gpt__lowercase_values', 1)) {
    $str = strtolower($str);
    $safe = '#[^a-z0-9 \-_]#';
  }
  else {
    $safe = '#[^A-Za-z0-9 \-_]#';
  }
  // Targeted ad unit can not accept any special characters, even if encoded,
  // so we strip out all potential offenders.
  $str = preg_replace($safe, '', trim($str));
  // Replace spaces with a dash, turns multiple dashes into a single dash.
  return preg_replace('#-{2,}#', '-', str_replace(' ', '-', $str));
}

/**
 * Helper function, sanitize targeting class.
 *
 * @param object $targeting
 *   See $options['targeting'] definition in gpt.api.php.
 *
 * @return void
 */
function gpt_sanitize_targeting(&$targeting) {
  // Yes targeting is a stdClass object, but we can foreach it for public
  // properties.
  foreach ($targeting as &$values) {
    foreach ($values as &$value) {
      if (!$value['eval']) {
        $value = gpt_sanitize_value($value);
      }
    }
  }
}

/**
 * Helper function, prepare a value from a key/value pair for use.
 *
 * @param string|array $value
 *   String or array of strings to be encoded to handle non-safe characters.
 * @param boolean $unique
 *   If $value is an array and $unique is TRUE then non-unique values are
 *   reduced to a single unique item. This should really only be FALSE if your
 *   code will be running unique on the array after this call.
 *
 * @return string|array
 *   String or array of strings that has been encoded to be GPT acceptable.
 */
function gpt_sanitize_value($value, $unique = TRUE) {
  $lowercase = variable_get('gpt__lowercase_values', 1);

  // Remove punctuation and symbols that is not a dash nor connector, from
  // UTF-8 scope. u modifier used as fallback if not compiled with unicode
  // properties.
  // This allows us to support accented characters while removing harmful
  // symbols and erroneous punctuation.
  // URL encoding is not required as it is untargetable in GPT even though the
  // GPT documentation says encoding is needed. Since we're stripping unsafe
  // characters we are fine.
  $value = preg_replace('#[\p{S}\p{Ps}\p{Pe}\p{Pi}\p{Pf}\p{Po}]#u', '', $value);

  if (is_array($value)) {
    foreach ($value as &$v) {
      $v = preg_replace('#\s{2,}#', ' ', trim($lowercase ? strtolower($v) : $v));
    }
    // Limit to unique, if appropriate, and strip empty items.
    return array_filter($unique ? array_unique($value) : $value);
  }

  // Reduce multiple spaces to a single space.
  return preg_replace('#\s{2,}#', ' ', trim($lowercase ? strtolower($value) : $value));
}

/**
 * #submit form element handler.
 *
 * Passes through to #gpt_submit_handler defined property. This avoids undefined
 * function errors from our submit handlers not being in .module for performance
 * reasons.
 */
function gpt_submit_handler($form, &$form_state) {
  ctools_include('gpt.admin', 'gpt', FALSE);
  $handler = $form_state['triggering_element']['#gpt_submit_handler'];
  $handler($form, $form_state);
}

/**
 * Implements hook_theme().
 */
function gpt_theme() {
  return array(
    'gpt_ads' => array(
      'variables' => array('name' => NULL, 'settings' => NULL, 'index' => NULL, 'container' => NULL),
    ),
  );
}

/**
 * Theme GPT Ads.
 */
function theme_gpt_ads($vars) {
  // Grab settings to be JSON encoded.
  $settings = $vars['settings']['gpt_ads'];

  // Allow modules to alter invididual ad settings before definition.
  drupal_alter('gpt_ad_slot_settings', $settings);

  // Container should be an element ID if present, so it doesn't need validation
  // on our part. Only other modules could expose this for user input, in that
  // case they need to sanitize the user input.
  $domId = isset($vars['container']) ? $vars['container'] : 'ad-manager-ad-' . $vars['name'] . '-' . $vars['index'];

  // TODO: Necessary to typecast?
  // Typecast boolean assignments for JSON encoding.
  if (isset($settings['outofpage'])) {
    $settings['outofpage'] = (bool) $settings['outofpage'];
  }
  if (isset($settings['refresh'])) {
    $settings['refresh'] = (bool) $settings['refresh'];
  }

  return '<script type="text/javascript">Drupal.GPT.registerSlot(\'' . $domId . '\',' . json_encode($settings) . ');</script>';
}
