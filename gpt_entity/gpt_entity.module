<?php

/**
 * Delete the GPT entity targeting for a specified entity.
 *
 * @param string $type
 *   Entity type.
 * @param mixed $id
 *   Entity identifier.
 */
function gpt_entity_crud_delete($type, $id) {
  db_delete('gpt_entity')
    ->condition('entity_type', $type)
    ->condition('entity_id', $id)
    ->execute();
}

/**
 * Load GPT entity targeting for a specified entity.
 *
 * @param string $type
 *   Entity type.
 * @param mixed $id
 *   Entity identifier.
 *
 * @return array|FALSE
 *   Return GPT array if found, otherwise FALSE.
 */
function gpt_entity_crud_load($type, $id) {
  $data = db_query('SELECT data FROM {gpt_entity} WHERE entity_type=:type AND entity_id=:id', array(
    ':type' => $type,
    ':id' => $id,
  ))->fetchField();

  if ($data) {
    return unserialize($data);
  }

  return FALSE;
}

/**
 * Save GPT entity targeting.
 *
 * @param string $type
 *   Entity type.
 * @param mixed $id
 *   Entity identifier.
 * @param type $data
 *   The GPT array to store.
 */
function gpt_entity_crud_save($type, $id, $data) {
  $data = serialize($data);

  // Insert/Update the record.
  db_merge('gpt_entity')
    ->key(array('entity_type' => $type, 'entity_id' => $id))
    ->insertFields(array(
      'entity_type' => $type,
      'entity_id' => $id,
      'data' => $data,
    ))
    ->updateFields(array('data' => $data))
    ->execute();
}

/**
 * Implements hook_entity_delete().
 */
function gpt_entity_entity_delete($entity, $type) {
  list($id) = entity_extract_ids($type, $entity);
  gpt_entity_crud_delete($type, $id);
}

/**
 * Implements hook_entity_load().
 */
function gpt_entity_entity_load($entities, $type) {
  foreach ($entities as $entity) {
    // Assign an entity_type property to every entity loaded, this is necessary
    // as the entity type is not accessible from the menu object in
    // gpt_entity_gpt_load_page_options_alter(). There is a Drupal core issue to
    // add this functionality at http://drupal.org/node/1042822
    $entity->entity_type = $type;
  }
}

/**
 * Implements hook_field_attach_form().
 */
function gpt_entity_field_attach_form($entity_type, $entity, &$form, &$form_state, $langcode) {
  // Bail out if we already have an entity form or our entity has no form.
  if (!empty($form['gpt_entity'])
      || !gpt_entity_has_targeting($entity_type, $entity)) {
    return;
  }

  // Load form from include file, keeps .module light weight.
  ctools_include('gpt_entity', 'gpt_entity', FALSE);
  gpt_entity_form($entity_type, $entity, $form, $form_state, $langcode);
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Alter settings form to provide needed configuration.
 */
function gpt_entity_form_ad_manager_settings_form_alter(&$form, &$form_state) {
  // Load in logic that is needed for the settings form.
  ctools_include('gpt_entity.admin', 'gpt_entity', FALSE);
  gpt_entity_global_settings_form($form, $form_state);
}

/**
 * Implements hook_form_alter().
 */
function gpt_entity_form_alter(&$form) {
  // TODO: Remove gpt_entity_form_alter() if http://drupal.org/node/1284642 is
  // fixed in core.
  if (isset($form['gpt_entity'])) {
    $form['#submit'][] = 'gpt_entity_form_submit';
  }
}

/**
 * Form submit callback, wrapper to give global scope to the submit handler.
 */
function gpt_entity_form_submit(&$form, &$form_state) {
  ctools_include('gpt_entity', 'gpt_entity', FALSE);
  gpt_entity_form_submit_handler($form, $form_state);
}

/**
 * Returns an array of settings to determine what entity bundles should have
 * targeting enabled.
 *
 * @param string $entity_type
 *   The entity type to return settings for. If omitted, all entity types'
 *   settings will be returned.
 *
 * @return array
 *   If a type is requested, the value will be an array with the bundle names as
 *   keys and a value that can be interpreted as boolean for whether or not that
 *   bundle should be targeted. If no type is supplied, an array structured as
 *   $array[$entity_type]['settings'][$bundle] will be returned. For both
 *   returns, a special bundle of __all__ is also provided to mean "all" bundles
 *   of that entity type.
 */
function gpt_entity_get_attach_form_settings($entity_type = NULL) {
  $settings = variable_get(
    'gpt_entity__attach_form_settings',
    array(
      'node' => array('settings' => array('__all__' => '__all__')),
      'taxonomy_term' => array('settings' => array('__all__' => '__all__')),
    )
  );

  if (!isset($entity_type)) {
    return $settings;
  }

  if (isset($settings[$entity_type]['settings'])) {
    return $settings[$entity_type]['settings'];
  }
  return array();
}

/**
 * Implements hook_gpt_load_page_options_alter().
 */
function gpt_entity_gpt_load_page_options_alter(&$options) {
  $item = menu_get_item();
  // Only proceed if there could be a page entity to act upon.
  if (!isset($item['page_arguments']) || !is_array($item['page_arguments'])) {
    return;
  }

  // Iterate over loaded arguments.
  foreach ($item['page_arguments'] as $entity) {
    if (!isset($entity->entity_type)) {
      continue;
    }

    $entity_info = entity_get_info($entity->entity_type);

    // We can be fairly certain this is an entity for the page, to be extra
    // secure we confirm that it is.
    if (!isset($entity_info['bundle keys']['bundle'])) {
      continue;
    }

    // Must wrap in isset as the value is sometimes not available... Panelizer.
    if (isset($entity->$entity_info['entity keys']['id'])) {
      $data = gpt_entity_crud_load($entity->entity_type, $entity->$entity_info['entity keys']['id']);
      if ($data) {
        gpt_alter_page_options($options, $data);
        // Break out of the foreach just to prevent any unique edge cases in
        // which there could be two entities in a menu item.
        break;
      }
    }
  }
}

/**
 * Determines if the provided entity should allow for customized targeting.
 *
 * @param string $entity_type
 *   The type of the entity that is provided.
 * @param stdClass $entity
 *   The entity object that is being evaluated.
 *
 * @return bool
 *   Returns TRUE if the entity should be targeted, FALSE otherwise.
 */
function gpt_entity_has_targeting($entity_type, $entity) {
  // Load the defined settings for our entity type.
  $settings = gpt_entity_get_attach_form_settings($entity_type);

  // Check if all bundles of our entity type are targeted. This lets us delay
  // the call to entity_get_info() if we do not need it.
  if (!isset($settings['__all__']) || !$settings['__all__']) {
    // Load the entity info so we can get our bundle.
    $entity_info = entity_get_info($entity_type);

    // Unfortunately, some entities do not have a bundle key so we must do a
    // check for one. We name it $bundle only so the following check will
    // have a value to use as an array key if there is no bundle key.
    $bundle = $entity_info['entity keys']['bundle'];
    if ($bundle) {
      $bundle = $entity->$entity_info['entity keys']['bundle'];
    }

    // Ensure that our bundle is allowed, or we exit now.
    if (!isset($settings[$bundle]) || !$settings[$bundle]) {
      return FALSE;
    }
  }

  return TRUE;
}

/**
 * Implements hook_module_implements_alter().
 */
function gpt_entity_module_implements_alter(&$implementations, $hook) {
  // Weight our hook to be ran last, as it is specific to the entity page and is
  // explicitly set by the user.
  if ($hook == 'gpt_load_page_options_alter') {
    $group = $implementations['gpt_entity'];
    unset($implementations['gpt_entity']);
    $implementations['gpt_entity'] = $group;
  }
}

/**
 * Implements hook_permission().
 */
function gpt_entity_permission() {
  return array(
    'gpt entity targeting' => array(
      'title' => t('Set entity targeting'),
      'description' => t('Allow users to set targeting values for individual entities.'),
    ),
  );
}
