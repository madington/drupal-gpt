<?php

/**
 * Alter GPT page options by adding in override values.
 *
 * TODO: This should probably go into gpt.module
 *
 * @param array $original
 * @param array $integrate
 */
function gpt_entity_alter_page_options(&$original, $integrate) {
  if (isset($integrate['targeting']['src'])) {
    // Append additional targeting to $original['targeting']['src']
    foreach ($integrate['targeting']['src'] as $key => $v) {
      $value = array_merge($original['targeting']['src'][$key], $integrate['targeting']['src'][$key]);
      $original['targeting']['src'][$key][] = $value;
    }

    // Unset $original's targeting prep, so the new values will be used.
    unset($integrate['targeting'], $original['targeting']['prep']);
  }

  // Update any other settings by overriding.
  foreach ($integrate as $k => $v) {
    if (!empty($v)) {
      $original[$k] = $v;
    }
  }
}

/**
 * Implements hook_entity_load(). 
 */
function gpt_entity_entity_load($entities, $type) {
  foreach ($entities as $entity) {
    // Assign an entity_type property to every entity loaded, this is necessary
    // as the entity type is not accessible from the menu object in
    // gpt_entity_gpt_load_page_options_alter(). There is a Drupal core issue to
    // add this functionality at http://drupal.org/node/1042822
    $entity->entity_type = $type;
  }
}

/**
 * Implements hook_field_attach_form().
 */
function gpt_entity_field_attach_form($entity_type, $entity, &$form, &$form_state, $langcode) {
  // TODO: Determine if entity type/bundle should have the form on it.
  if (false) {
    // TODO: Add targeting form elements.
    dpm($entity_type, 'entity_type');
    dpm($entity, 'entity');
    dpm($form, 'form');
    dpm($form_state, 'form_state');
  }
}

/**
 * Implements hook_field_extra_fields().
 */
function gpt_entity_field_extra_fields() {
  $extra = array();

  foreach (entity_get_info() as $entity_type => $entity_info) {
    foreach (array_keys($entity_info['bundles']) as $bundle) {
      // TODO: Make if false instead check entities enabled for targeting.
      if (false) {
        $extra[$entity_type][$bundle]['form']['gpt_entity'] = array(
          'label' => t('GPT entity targeting'),
          'description' => t('Set targeting for Google Publisher Tag on individual entities.'),
          'weight' => 50,
        );
      }
    }
  }

  return $extra;
}

/**
 * Implements hook_gpt_load_page_options_alter().
 */
function gpt_entity_gpt_load_page_options_alter(&$options) {
  $item = menu_get_item();
  // Could use $item['page_arguments'] instead of looping, but that would not
  // provide the argument's identifier passed to the 'load_functions'.
  foreach ($item['map'] as $k => $v) {
    // If $v is an object then it is likely to be an entity, so we act on it.
    if (is_object($v)) {
      // TODO: Query for the item here.
      dpm($item['map'][$k]->entity_type, 'Entity type to fetch.');
      dpm($item['original_map'][$k], 'Entity identifier for fetching.');
      // If fetched record found.
      if (false) {
        gpt_entity_alter_page_options($options, $data);
      }
    }
  }
}

/**
 * Implements hook_module_implements_alter().
 */
function gpt_entity_module_implements_alter(&$implementations, $hook) {
  // Weight our hook to be ran last, as it is specific to the entity page and is
  // explicitly set by the user.
  if ($hook == 'gpt_load_page_options_alter') {
    $group = $implementations['gpt_entity'];
    unset($implementations['gpt_entity']);
    $implementations['gpt_entity'] = $group;
  }
}
